#!/bin/bash

# Detener script al primer error
set -e

# Variables de configuración
OE_VERSION="18.0"
OE_USER="odoo"
OE_HOME="/opt/$OE_USER"
OE_HOME_EXT="$OE_HOME/$OE_VERSION"
OE_CONFIG="${OE_USER}${OE_VERSION%.*}"  # Combina usuario y versión sin ".0"
OE_PORT="8069"
LONGPOLLING_PORT="8072"

# Preguntar por el dominio o subdominio para Nginx
read -p "Introduce el nombre del sitio web para acceder a Odoo (ejemplo: tusitio.com): " WEBSITE_NAME

# Preguntar por el email para Certbot
read -p "Introduce un email válido para Certbot (para notificaciones de renovación): " ADMIN_EMAIL

# Verificar si el usuario ya existe, si no, crearlo
echo "Introduce la contraseña del super usuario (root) para comenzar las configuraciones."
if getent passwd "$OE_USER" > /dev/null 2>&1; then
    echo "El usuario $OE_USER ya existe."
else
    echo "Creando el usuario $OE_USER..."
    sudo adduser --system --quiet --shell=/bin/bash --home=$OE_HOME --gecos 'ODOO' --group $OE_USER
    # El usuario debe ser añadido a la lista de sudoers.
    sudo adduser $OE_USER sudo
    echo "Usuario $OE_USER creado."
fi

# Clonar el repositorio de Odoo
sudo git clone --depth 1 --branch $OE_VERSION https://github.com/odoo/odoo.git $OE_HOME_EXT
echo "Clonando el repositorio de Odoo..."

# Configurar Enterprise (si aplica)
read -p "¿Tienes acceso al repositorio de GitHub Enterprise de Odoo? (s/n): " INSTALL_ENTERPRISE
if [[ "$INSTALL_ENTERPRISE" =~ ^[Ss]$ ]]; then
    read -p "Introduce tu usuario de GitHub: " GITHUB_USER
    read -p "Introduce tu contraseña o token de GitHub: " GITHUB_PASS
    echo "Clonando repositorio Enterprise..."
    sudo git clone https://$GITHUB_USER:$GITHUB_PASS@github.com/odoo/enterprise.git $OE_HOME_EXT/enterprise
else
    read -p "Introduce la ruta local donde están los archivos de Enterprise: " ENTERPRISE_PATH
    echo "Copiando archivos Enterprise desde $ENTERPRISE_PATH..."
    sudo cp -r $ENTERPRISE_PATH $OE_HOME_EXT/enterprise
fi

# Establecer permisos en el directorio $OE_HOME_EXT
echo "Estableciendo permisos para: $OE_USER en el directorio $OE_HOME"
sudo chown -R $OE_USER:$OE_USER $OE_HOME/

# Preguntar por la contraseña de la base de datos
read -p "¿Deseas definir una contraseña para PostgreSQL o generarla automáticamente? (d/g): " DB_PASSWORD_OPTION
if [[ "$DB_PASSWORD_OPTION" =~ ^[Dd]$ ]]; then
    read -p "Introduce la contraseña para PostgreSQL: " OE_DB_PASSWORD
else
    OE_DB_PASSWORD=$(openssl rand -hex 12)
    echo "Contraseña generada para PostgreSQL: $OE_DB_PASSWORD"
fi

# Actualizar el sistema
echo "Actualizando el sistema..."
sudo apt update
sudo apt upgrade -y

# Instalar dependencias
echo "Instalando dependencias..."
sudo apt install -y git python3-cffi build-essential wget python3-dev python3-venv python3-wheel libxslt-dev libzip-dev libldap2-dev libsasl2-dev python3-setuptools node-less libpng-dev libjpeg-dev gdebi libssl-dev libffi-dev libblas-dev libatlas-base-dev xfonts-75dpi fontconfig xfonts-base libxrender1 libfontconfig1 libx11-dev libjpeg62 libxtst6 libjpeg-turbo8-dev libx11-doc libpq-dev libxcb-doc ttf-mscorefonts-installer

# Instalar Node.js y paquetes LESS/CSS
echo "Instalando NPM Node.js y paquetes LESS/CSS..."
sudo apt install -y npm
sudo npm install -g less less-plugin-clean-css rtlcss

# Crear enlace simbólico para node.js si es necesario
if ! which node > /dev/null; then
    echo "Creando enlace simbólico para Node.js..."
    sudo ln -s /usr/bin/nodejs /usr/bin/node
fi

# Configuración de PostgreSQL
echo "Configurando PostgreSQL..."
sudo apt install -y postgresql
sudo su - postgres -c "psql -c \"CREATE USER $OE_USER WITH CREATEDB SUPERUSER PASSWORD '$OE_DB_PASSWORD';\""

# Crear carpetas necesarias
echo "Creando directorios para Odoo y custom addons..."
sudo mkdir -p $OE_HOME_EXT/enterprise $OE_HOME_EXT/addons $OE_HOME_EXT/custom/addons
sudo chown -R $OE_USER:$OE_USER $OE_HOME_EXT
sudo chmod -R 755 $OE_HOME_EXT

# Descargar e instalar libssl1.1
echo "Instalando libssl1.1..."
wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
sudo dpkg -i ./libssl1.1_1.1.0g-2ubuntu4_amd64.deb
rm -f libssl1.1_1.1.0g-2ubuntu4_amd64.deb

# Descargar e instalar wkhtmltopdf
echo "Instalando wkhtmltopdf..."
WKHTMLTOX_URL="https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.focal_amd64.deb"
wget $WKHTMLTOX_URL
sudo dpkg -i wkhtmltox_0.12.5-1.focal_amd64.deb
sudo apt-get install -f -y
rm -f wkhtmltox_0.12.5-1.focal_amd64.deb

echo "wkhtmltopdf Creando enlaces simbólicos..."
sudo ln -sf /usr/local/bin/wkhtmltopdf /usr/bin/wkhtmltopdf
sudo ln -sf /usr/local/bin/wkhtmltoimage /usr/bin/wkhtmltoimage
sudo chown $OE_USER:$OE_USER /usr/local/bin/wkhtmltopdf /usr/local/bin/wkhtmltoimage

# Crear entorno virtual desde el usuario $OE_USER
echo "Cambiando al usuario: $OE_USER para crear el entorno virtual."

sudo su $OE_USER -c "
    echo 'Creando entorno virtual para Odoo...'
    python3 -m venv $OE_HOME_EXT/venv
    if [[ -d \"$OE_HOME_EXT/venv\" ]]; then
        echo 'Activando entorno virtual...'
        source $OE_HOME_EXT/venv/bin/activate || { echo 'No se pudo activar el entorno virtual.'; exit 1; }
        echo 'Instalando pip y setuptools actualizados...'
        pip install --upgrade pip setuptools || { echo 'Error al actualizar pip o setuptools.'; exit 1; }
        
        # Instalar wheel
        echo 'Instalando wheel...'
        pip install wheel

        # Instalar pycryptodome
        echo 'Instalando pycryptodome...'
        pip install pycryptodome

        # Instalar psycopg2 (si no está en los requirements)
        echo 'Instalando psycopg2...'
        pip install psycopg2

        # Instalar los requirements de Odoo
        echo 'Instalando requirements de Odoo...'
        pip install -r $OE_HOME_EXT/requirements.txt

        # Salir del entorno virtual
        deactivate
    else
        echo 'Error: No se pudo crear el entorno virtual en $OE_HOME_EXT/venv'
        exit 1
    fi
"

# Continuar con el script principal
echo "Creación del entorno virtual finalizada. Volviendo al usuario principal."

# Instalar NGINX y Certbot
echo "Instalando NGINX y Certbot..."
sudo apt install -y nginx certbot python3-certbot-nginx

cat <<EOF > ~/odoo_http
server {
    listen 80;
    server_name $WEBSITE_NAME;
    location / {
        proxy_pass http://127.0.0.1:$OE_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_redirect off;
    }
}
EOF

# Comprueba si ya hay un fichero de configuración de nginx y lo elimina
if [ -f /etc/nginx/sites-available/$WEBSITE_NAME ]; then
    echo "El archivo /etc/nginx/sites-available/$WEBSITE_NAME ya existe. Eliminándolo..."
    sudo rm -f /etc/nginx/sites-available/$WEBSITE_NAME
    sudo rm -f /etc/nginx/sites-enabled/$WEBSITE_NAME
fi

# Mueve el archivo al directorio de nginx
sudo mv ~/odoo_http /etc/nginx/sites-available/$WEBSITE_NAME
sudo ln -s /etc/nginx/sites-available/$WEBSITE_NAME /etc/nginx/sites-enabled/
sudo rm -f /etc/nginx/sites-enabled/default
sudo systemctl restart nginx

# Configurar Certbot para HTTPS
echo "Asegúrate de que $WEBSITE_NAME está configurado correctamente y apunta a este servidor antes de continuar con Certbot."
echo "Ejecutando Certbot para configurar HTTPS..."
sudo certbot --nginx -d $WEBSITE_NAME --noninteractive --agree-tos --email $ADMIN_EMAIL

# Actualizar configuración a HTTPS completa
echo "Actualizando configuración de Nginx para HTTPS..."
cat <<EOF > ~/odoo_https
#odoo server
map \$sent_http_content_type \$content_type_csp {
    default "";
    ~image/ "default-src 'none'";
}
upstream odoo {
  server 127.0.0.1:8069;
}
upstream odoochat {
  server 127.0.0.1:8072;
}
map \$http_upgrade \$connection_upgrade {
  default upgrade;
  ''      close;
}

# http -> https
server {
  listen 80;
  server_name $WEBSITE_NAME;
  rewrite ^(.*) https://\$host\$1 permanent;
}

server {
    listen 443 ssl;
    server_name $WEBSITE_NAME;
    proxy_read_timeout 720s;
    proxy_connect_timeout 720s;
    proxy_send_timeout 720s;

    # SSL parameters
    ssl_certificate /etc/letsencrypt/live/$WEBSITE_NAME/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/$WEBSITE_NAME/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # log
    access_log /var/log/nginx/$OE_USER-access.log;
    error_log /var/log/nginx/$OE_USER-error.log;

    # Redirect requests to odoo backend server
    location / {
        # Add Headers for odoo proxy mode
        proxy_set_header X-Forwarded-Host \$http_host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_redirect off;
        proxy_pass http://odoo;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8
    }

    # Redirect websocket requests to odoo gevent port
        location /websocket {
        proxy_pass http://odoochat;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;
        proxy_set_header X-Forwarded-Host \$http_host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Real-IP \$remote_addr;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8
    }

    # Redirect requests to odoo backend server
    location @odoo {
        # Add Headers for odoo proxy mode
        proxy_set_header X-Forwarded-Host \$http_host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_redirect off;
        proxy_pass http://odoo;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8
    }

    # Serve static files right away
    location ~ ^/[^/]+/static/.+$ {
        # root and try_files both depend on your addons paths
        root $OE_HOME/$OE_VERSION;
        try_files /enterprise/addons\$uri /addons\$uri /custom/addons\$uri @odoo;
        expires 24h;
        add_header Content-Security-Policy \$content_type_csp;
    }

    # Serve filestore files 
    location /web/filestore {
        internal;
        alias /$OE_USER/.local/share/Odoo/filestore;
    }

    # common gzip
    gzip_types text/css text/scss text/plain text/xml application/xml application/json application/javascript;
    gzip on;
}

EOF

# Comprueba si ya hay un fichero de configuración de nginx y lo elimina
if [ -f /etc/nginx/sites-available/$WEBSITE_NAME ]; then
    echo "El archivo /etc/nginx/sites-available/$WEBSITE_NAME ya existe. Eliminándolo..."
    sudo rm -f /etc/nginx/sites-available/$WEBSITE_NAME
    sudo rm -f /etc/nginx/sites-enabled/$WEBSITE_NAME
fi
# Mueve el archivo al directorio de nginx
sudo mv ~/odoo_https /etc/nginx/sites-available/$WEBSITE_NAME
sudo ln -s /etc/nginx/sites-available/$WEBSITE_NAME /etc/nginx/sites-enabled/
sudo rm -f /etc/nginx/sites-enabled/default
sudo systemctl restart nginx
echo "Hecho! El servidor Nginx está habilitado y funcionando. Puedes encontrar la configuración en /etc/nginx/sites-available/$WEBSITE_NAME"

# Asignar permisos adecuados en los logs de fail2ban para Odoo
sudo chmod 644 /var/log/nginx/${OE_USER}-access.log

# Instalar Fail2Ban
echo "Instalando Fail2Ban..."
sudo apt install -y fail2ban

# Crear filtro para Odoo
echo "Creando filtro para Odoo..."
sudo bash -c "cat > /etc/fail2ban/filter.d/odoo-login.conf <<EOF
[Definition]
failregex = ^ \\d+ INFO \\S+ \\S+ Login failed for db:\\S+ login:\\S+ from <HOST>
ignoreregex =
EOF"

# Crear jail para Odoo
echo "Creando jail para Odoo..."
sudo bash -c "cat > /etc/fail2ban/jail.d/odoo-login.conf <<EOF
[odoo-login]
enabled = true
port = http,https
bantime = 900  ; 15 min ban
maxretry = 10  ; if 10 attempts
findtime = 60  ; within 1 min
logpath = /var/log/nginx/${OE_USER}-access.log  ; set the actual odoo log path here
EOF"

# Reiniciar Fail2Ban para aplicar cambios
echo "Reiniciando Fail2Ban..."
sudo systemctl restart fail2ban

# Crear archivo de configuración de Odoo
echo "Creando archivo de configuración para Odoo..."
sudo mkdir -p /etc/$OE_USER

sudo tee /etc/$OE_USER/$OE_CONFIG.conf > /dev/null <<EOF
[options]
addons_path = $OE_HOME_EXT/enterprise/addons,$OE_HOME_EXT/addons,$OE_HOME_EXT/custom/addons
admin_passwd = admin
db_host = False
db_port = False
db_user = $OE_USER
db_password = $OE_DB_PASSWORD
xmlrpc_port = $OE_PORT
longpolling_port = $LONGPOLLING_PORT
proxy_mode = True
logfile = /var/log/$OE_USER/$OE_USER.log
EOF

sudo chown $OE_USER:$OE_USER /etc/$OE_USER/$OE_CONFIG.conf
sudo chmod 640 /etc/$OE_USER/$OE_CONFIG.conf

echo "Creando directorio de logs..."
sudo mkdir -p /var/log/$OE_USER
sudo chown $OE_USER:$OE_USER /var/log/$OE_USER

# Crear servicio para Odoo con systemd
echo "Creando archivo de unidad para systemd..."
sudo tee /etc/systemd/system/$OE_CONFIG.service > /dev/null <<EOF
[Unit]
Description=Odoo $OE_VERSION
Requires=postgresql.service
After=network.target postgresql.service

[Service]
Type=simple
SyslogIdentifier=$OE_CONFIG
User=$OE_USER
Group=$OE_USER
ExecStart=$OE_HOME_EXT/venv/bin/python3 $OE_HOME_EXT/odoo-bin -c /etc/$OE_USER/$OE_CONFIG.conf
StandardOutput=journal+console
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Iniciar y habilitar el servicio de Odoo
sudo systemctl daemon-reload
sudo systemctl enable $OE_CONFIG.service
sudo systemctl start $OE_CONFIG.service

# Preguntar al usuario si desea habilitar el acceso SSH para el usuario
read -p "¿Deseas habilitar el acceso SSH para el usuario $OE_USER? (s/n): " ENABLE_SSH
if [[ "$ENABLE_SSH" =~ ^[Ss]$ ]]; then
    echo "Habilitando acceso SSH para el usuario $OE_USER..."
    
    # Asignar una contraseña para el acceso SSH
    echo "Por favor, establece una contraseña para el usuario $OE_USER:"
    sudo passwd $OE_USER

    # Crear carpeta .ssh y configurar permisos
    echo "Configurando claves SSH..."
    sudo mkdir -p $OE_HOME/.ssh
    sudo chmod 700 $OE_HOME/.ssh
    sudo chown $OE_USER:$OE_USER $OE_HOME/.ssh

    # Crear archivo authorized_keys si no existe
    if [[ ! -f "$OE_HOME/.ssh/authorized_keys" ]]; then
        sudo touch $OE_HOME/.ssh/authorized_keys
        sudo chmod 600 $OE_HOME/.ssh/authorized_keys
        sudo chown $OE_USER:$OE_USER $OE_HOME/.ssh/authorized_keys
        echo "Archivo authorized_keys creado en $OE_HOME/.ssh/."
    fi

    # Configurar acceso por clave (opcional, puede dejarse vacío inicialmente)
    echo "Si deseas usar claves SSH, agrega la clave pública al archivo $OE_HOME/.ssh/authorized_keys."

    # Confirmar configuración SSH
    echo "Asegúrate de que el archivo /etc/ssh/sshd_config permita el acceso SSH al usuario $OE_USER."
else
    echo "Acceso SSH no habilitado para el usuario $OE_USER."
fi


# Resumen de la instalación
echo "-----------------------------------------------------------"
echo "¡Instalación completada! El servidor Odoo está configurado:"
echo "-----------------------------------------------------------"
echo "Puerto principal: $OE_PORT"
echo "Puerto de Longpolling: $LONGPOLLING_PORT"
echo "Usuario del servicio: $OE_USER"
echo "Ubicación del archivo de configuración: /etc/$OE_USER/$OE_CONFIG.conf"
echo "Ubicación de los logs: /var/log/$OE_USER"
echo "Usuario de PostgreSQL: $OE_USER"
echo "Contraseña de PostgreSQL (usuario $OE_USER): $OE_DB_PASSWORD"
echo "Contraseña del superusuario de Odoo (admin): admin"
echo "Ubicación del código fuente: $OE_HOME_EXT"
echo "Carpetas de addons:"
echo " - Addons de Enterprise: $OE_HOME_EXT/enterprise"
echo " - Addons de Community: $OE_HOME_EXT/addons"
echo " - Addons personalizados: $OE_HOME_EXT/custom/addons"
echo "-----------------------------------------------------------"
echo "Comandos para administrar el servicio Odoo:"
echo " - Iniciar el servicio: sudo service $OE_CONFIG start"
echo " - Detener el servicio: sudo service $OE_CONFIG stop"
echo " - Reiniciar el servicio: sudo service $OE_CONFIG restart"
echo "-----------------------------------------------------------"
echo "Acceso a Odoo desde el navegador:"
echo " - HTTP: http://$WEBSITE_NAME"
echo " - HTTPS: https://$WEBSITE_NAME"
echo "-----------------------------------------------------------"